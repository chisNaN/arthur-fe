<!doctype html>
<html lang="fr">
<head>
  <meta charset="utf-8">
  <title>gdrive mp3 player</title>
<style type="text/css">
html {
  height: 100%;
  margin: 0;
  padding: 0;
}
	body {
		background-color: black;
		color: white;
    height: 100%;
	}
  div {
    display: flex;
  }
  #main {
    flex-flow: row;
    height: 100%;
  }
  #left {
    width: 50%;
    flex-flow: column;
  }
  #right {
    width: 50%;
  }
  select {
    height: 100%;
  }
</style>
</head>
<body>
  <div id="main">
    <div id="left">
      <div><h1>Welcome</h1></div>
    	<br>
      <div>
        All tracks are played randomly by default.
        Once you select manually a track from the right panel it will read it automatically.
        But after your selected track has finished to read it will return to read from randoms tracks that HAVE NOT been read yet!
      </div>
      <marquee></marquee>
    	<div id="player" style="display: none;">
        <audio controls type="audio/mp3"></audio>
        <a href="#">
          <img src="https://ipfs.infura.io/ipfs/Qma9hHTu6tgq1USZLBUzup5BuHToEhFyYa5aXMuLvzUdDL" style="width: 55px; border-radius: 20px; background-color: white;" />
        </a>
      </div>
    </div>
    <div id="right">
      <form>
        <input type="search" style="width: 300px;" list="tracks" placeholder="Search a track name">
        <datalist id="tracks"></datalist>
        <select multiple></select>
      </form>
    </div>
</div>
 <script type="text/javascript">
 	const googlePrefix = 'https://drive.google.com/uc?id='
 	// const googlePostfix = '&export=download'
 	document.addEventListener('DOMContentLoaded', async _ => {
    try {
      let notSplicedTracks = null
   		let library = localStorage.getItem('lib')
   		const audio = document.querySelector('audio')
   		let currentTrackIndex = 0
      const loadTrack = async () => {
   			try {
   				currentTrackIndex = ~~(Math.random() * library.length)
  				audio.src = googlePrefix + Object.values(library[currentTrackIndex])[0]
   				audio.load()
          document.querySelector('marquee').innerHTML = Object.keys(library[currentTrackIndex])[0]
   				audio.play()
   				// console.log('p ', p)
   				library.splice(currentTrackIndex, 1) // so we cannot repeat a track...
   				console.warn(library[currentTrackIndex]) // to check if its a diff trick
   			} catch (e) {
   				console.warn(e)
   			}
      } // end loadTrack
      if (!library) {
   			document.querySelector('h1').innerHTML = 'Please wait for the library to load...'
   			const response = await fetch('https://script.google.com/macros/s/AKfycbwYug5msnkvOt67uGxYaE3EVpxGq50dX4V-9WheJt08wqECIRy3/exec')
   			library = await response.json()
   			document.querySelector('h1').innerHTML = 'Library successfully loaded!'
   			console.log(library)
   			localStorage.setItem('lib', JSON.stringify(library))
   			loadTrack()
   		} else {
   			console.log('library already in cache you can check localStorage')
   			library = JSON.parse(library)
   			loadTrack()
   		}
      // ------ need to make a REAL CLONE of all lib
   		notSplicedTracks = [...library]
      // _______________
      document.querySelector('h1').innerHTML = `${notSplicedTracks.length} tracks`
      document.querySelector('#player').style.display = 'block'
      const options = notSplicedTracks.map((v, k) => {
        const trackName = Object.keys(v)[0].length > 40 ? Object.keys(v)[0].substr(0, 40) : Object.keys(v)[0]
        return `<option>${trackName}</option>`
      }).join('')
      document.querySelector('datalist').innerHTML = options
      document.querySelector('select').innerHTML = options
      // --------- --------- LISTENERS --------- ---------
   		audio.addEventListener('ended', async _ => {
   			try {
   				console.warn('song ended')
   				await loadTrack()
   			} catch (e) {
   				console.warn(e)
   			}
   		}) // end ended
      document.querySelector('a').addEventListener('click', async e => {
        try {
          document.querySelector('marquee').innerHTML = 'Wait please...'
          e.currentTarget.style.display = 'none'
          console.warn('click next track')
          await loadTrack()
          document.querySelector('a').style.display = 'block'
        } catch (e) {
          console.warn(e)
        }
      }) // end click
      // this function SHOULD play a track from ALL copied library
      document.querySelector('select').addEventListener('click', async e => {
        try {
          document.querySelector('marquee').innerHTML = 'Wait please...'
          const index = e.currentTarget.selectedIndex
          audio.src = googlePrefix + Object.values(notSplicedTracks[index])[0]
          audio.load()
          const p = await audio.play()
          document.querySelector('marquee').innerHTML = Object.keys(notSplicedTracks[index])[0]
        } catch (e) {
          console.warn(e)
        }
      }) // end change
      document.querySelector('form').addEventListener('submit', async e => {
        try {
          e.preventDefault()
          const datalist = document.querySelector('datalist')
          const inputVal = document.querySelector('input').value
          let index = 0
          let i = -1
          for (i = -1; ++i<datalist.options.length;) {
            if (inputVal === datalist.options[i].innerText) {
              index = i
              break
            }
          }
          if (index !== 0 && i !== notSplicedTracks.length) {
            document.querySelector('marquee').innerHTML = 'Wait please...'
            audio.src = googlePrefix + Object.values(notSplicedTracks[index])[0]
            audio.load()
            const p = await audio.play()
            document.querySelector('marquee').innerHTML = Object.keys(notSplicedTracks[index])[0]
          } else {
            alert('NO RESULTS')
          }
        } catch (e) {
          console.warn(e)
        }
      }) // end submit
    } catch (e) {
      console.warn(e)
      if (e.toString().includes('localStorage')) {
        document.querySelector('h1').innerHTML = 'Cannot read localStorage: do you use BRAVE navigator and enabled all cookies?'
      } else {
        document.querySelector('h1').innerHTML = e.toString()
      }
    }
 	}) // end DOMContentLoaded
 </script>
</body>
</html>
